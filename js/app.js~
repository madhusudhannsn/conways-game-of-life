var liveCellsMap = {};
var cellsToBeDead = [];
var cellsToBeAlive = [];
var totalCellsMap ={};
var reproductionCellsMap ={};

var gridRows = 112;
var gridColumns = 112;

var table = document.getElementById('game-table');
var startGameButton = document.getElementById('startGameButton');
var pauseButton = document.getElementById('pauseButton');
var stepButton = document.getElementById('stepButton');
var resetButton = document.getElementById('resetButton');
var glidergunPattern = document.getElementById('glider');

var mouseDownstaus = false;


var periodicStatus;

function preprocessor () {
		
	var tableBody = computeTableStructure(gridRows,gridColumns);
	setInnerHTML(table,tableBody);
	registerEvents();
	loadTableCells();
	//startGameButton
}

function registerEvents () {
	//table.addEventListener('click',tableClick);
	table.addEventListener('mousemove',mousemove);	
	table.addEventListener('mouseup',mouseup);	
	table.addEventListener('mousedown',mousedown);		
	startGameButton.addEventListener('click',execute);
	pauseButton.addEventListener('click',pauseGame);
	stepButton.addEventListener('click',nextStep);
	glidergunPattern.addEventListener('click',initiateGlider);	
}


function mousemove (e) {
	
	if(mouseDownstaus) {
			tableClick(e);
	}

}
function mouseup (e) {
	mouseDownstaus = false;

}
function mousedown (e) {

	tableClick(e);
	mouseDownstaus = true;

}






function nextStep() {
	init();
}


function pauseGame() {
	clearInterval(periodicStatus);
}

function initiateGlider () {
	applyPattern('12#36');
	applyPattern('13#34');
	applyPattern('13#36');
	applyPattern('14#32');
	applyPattern('14#33');
	applyPattern('14#46');
	applyPattern('14#47');
	applyPattern('14#24');
	applyPattern('14#25');
	applyPattern('15#32');
	applyPattern('15#33');
	applyPattern('15#27');
	applyPattern('15#46');
	applyPattern('15#47');
	applyPattern('15#23');
	applyPattern('16#33');
	applyPattern('16#32');
	applyPattern('16#28');
	applyPattern('16#12');
	applyPattern('16#13');
	applyPattern('16#22');
	applyPattern('17#34');
	applyPattern('17#36');
	applyPattern('17#26');
	applyPattern('17#28');
	applyPattern('17#29');
	applyPattern('17#12');
	applyPattern('17#22');
	applyPattern('17#13');
	applyPattern('18#22');
	applyPattern('18#28');
	applyPattern('18#36');
	applyPattern('19#27');
	applyPattern('19#23');
	applyPattern('20#24');
	applyPattern('20#25');

}

function applyPattern (id) {
		var cell = totalCellsMap[id];
		cell.element.style.background = 'green';
		cell.status = 'live';
		liveCellsMap[id] = cell;
}




function tableClick (e) {
		var clickedElement = document.getElementById(e.srcElement.id);
		var cell = totalCellsMap[e.srcElement.id];
		cell.element.style.background = 'green';
		cell.status = 'live';
		liveCellsMap[e.srcElement.id] = cell;
}

function runPeriodically() {
	periodicStatus = setInterval(function(){init()},10);
}
function execute() {
	runPeriodically();
}


	
function init () {
	processLiveCells();
	processForReproduction();
	cleanup();
}

function Cell (element,rowNo,colNo) {
	this.status = 'not born';
	this.element = element;
	this.rowNo = rowNo;
	this.colNo = colNo;
}

function computeTableStructure (rows,cols)
{
	var innerTableData='';
	for(var i=0;i<rows;i++)
	{
		var row = "<tr>";
		for(var j=0;j<cols;j++)
		{
			row+='<td id=\"';
			var id = computeId(i,j);
			row+=id;
			row+='\"> </td>';
		}
		row+='</tr>';
		innerTableData+=row;
	}
	return innerTableData;
}

function setInnerHTML (element,htmlbody)
{
	element.innerHTML = htmlbody;
}
function computeId (i,j) {
			var id= '';
			if (i < 10)
				id+= '0' + i;
			else
				id+= i;			
			id+='#';
			if (j < 10)
				id+= '0' + j;
			else
				id+= j;
	return id;
}
function loadTableCells() {
	var table = document.getElementById('game-table');
	for(var i=0;i<gridRows;i++)
	{
		for(var j=0;j<gridColumns;j++)
		{
			var id = computeId(i,j);
			var cell = new Cell(table.rows[i].cells[j],i,j);
			totalCellsMap[id] = cell;
		}
	}
}

function processLiveCells() {
	for(var key in liveCellsMap) {
		if(liveCellsMap.hasOwnProperty(key)) {
			var cell = liveCellsMap[key];
			var counter = checkLifeForEachCell(cell,'live');
			var status = checkRulesForLiveCell(cell.status,counter);
			if(status == 'dead')
			cellsToBeDead.push(key);
			updateColor(status,cell);
		}
	}
}

function processForReproduction() {
	for(var key in reproductionCellsMap) {
		if(reproductionCellsMap.hasOwnProperty(key)) {
			var cell = reproductionCellsMap[key];
			var counter = checkLifeForEachCell(cell,'reproduction');
			var status = checkRulesForNewCell(counter);
			if(status == 'live')
			cellsToBeAlive.push(key);
			updateColor(status,cell);
		}
	}
}


//Need to check why object is not incremented
function checkLifeForEachCell (cell,process) {
	var counter = 0;
	var rowNo = cell.rowNo;
	var colNo = cell.colNo;
	counter += checkForNeighbourLife(rowNo-1,colNo-1,process);
	counter += checkForNeighbourLife(rowNo,colNo-1,process);
	counter += checkForNeighbourLife(rowNo+1,colNo-1,process);
	counter += checkForNeighbourLife(rowNo-1,colNo,process);
	counter += checkForNeighbourLife(rowNo+1,colNo,process);
	counter += checkForNeighbourLife(rowNo-1,colNo+1,process);
	counter += checkForNeighbourLife(rowNo,colNo+1,process);
	counter += checkForNeighbourLife(rowNo+1,colNo+1,process);
	return counter;
}

function checkForNeighbourLife(rowNo,colNo,process) {
	var counter = 0;
	if(rowNo != -1 && colNo != -1 && rowNo != gridRows && colNo != gridColumns ) {
		var id = computeId(rowNo,colNo);
		var cell = totalCellsMap[id];
		counter = checkLife(cell.status);
		if(counter == 0 && process == 'live') {
			reproductionCellsMap[id] = cell;
		}
	}
	return counter;	
} 

function checkLife(status) {
	var counter = 0 ;
	if(status == 'live') {
		counter++; 
	}
	
	return counter;
}

function checkRulesForLiveCell(status,counter) {
	
	if (counter == 2 || counter == 3) {
		return 'live';
	}	
	else {
		if(status == 'live') {
			return 'dead';
		}	
		else {
			return 'not born';
		}
	}	
	
}

function checkRulesForNewCell(counter) {
	
	if (counter == 3) 
		return 'live';	
	
}

function updateColor (status,cell) {
	if(status == 'live')
		cell.element.style.background = 'green';
	else if(status == 'dead')
		cell.element.style.background = 'yellow';
	else
		cell.element.style.background = 'white';	
}
//TODO Need to check for garbage collection
function cleanup() {
	reproductionCellsMap = {};
	for(i=0;i<cellsToBeDead.length;i++) {
		var cellKey = cellsToBeDead[i];
		totalCellsMap[cellKey].status = 'dead';
		delete liveCellsMap[cellKey];
	}
	for(i=0;i<cellsToBeAlive.length;i++) {
			var cellKey = cellsToBeAlive[i];
			totalCellsMap[cellKey].status = 'live';
		 liveCellsMap[cellsToBeAlive[i]] = totalCellsMap[cellKey];
	}
	cellsToBeDead = [];
	cellsToBeAlive = [];
}






